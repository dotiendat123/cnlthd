import React, { useState, useEffect, useMemo, useCallback } from 'react';
import './App.css';
//Hi·ªÉn th·ªã danh s√°ch vi·ªác l√†m (component tasklist)
//ƒê·ªãnh nghƒ©a function component 
// s·ª≠ d·ª•ng react.momo  ƒë·ªÉ ghi nh·ªõ component v√† n√≥ ch·ªâ render l·∫°i n·∫øu props thay ƒë·ªïi => ƒë·ªÉ t√¥i ∆∞u hi·ªáu su·∫•t.
//tasks: m·∫£ng c√°c c√¥ng vi·ªác
//onEdit: h√†m x·ª≠ l√Ω khi nh·∫•n n√∫t ch·ªânh s·ª≠a
//onDelete: h√†m x·ª© l√Ω khi nh·∫•n n√∫t x√≥a
//onToggle: ƒë√°nh d·∫•u khi ho√†n th√†nh
const TaskList = React.memo(({ tasks, onEdit, onDelete, onToggle }) => {
  return (
    // t·∫°o kho·∫£ng c√°ch d·ªçc gi·ªØa c√°c th·∫ª li
    // s·ª≠ d·ª•ng to√°n t·ª≠ 3 ng√¥i ƒë·ªÉ ki·ªÉn tra n·∫øu tasks kh√¥ng c√≥ th√¨ hi·ªÉn th·ªã d√≤ng ch∆∞a c√≥ c√¥ng vi·ªác n√†o
    // n·∫øu tasks c√≥ th√¨ s·ª≠ d·ª•ng .map ƒë·ªÉ l·∫∑p qua m·∫£ng, render t·ª´ng c√¥ng vi·ªác th√†nh th·∫ª li

    <ul className="space-y-4">
      {tasks.length === 0 ? (
        <p className="text-gray-400 italic">Ch∆∞a c√≥ c√¥ng vi·ªác n√†o...</p>
      ) : (
        tasks.map((task, index) => (
          <li
            key={index}
            className={`flex justify-between items-center p-4 rounded-lg border hover:shadow ${task.completed ? 'bg-green-100 border-green-300' : 'bg-blue-50 border-blue-200'
              }`}
          >
            <div>
              <p
                className={`font-semibold text-lg ${task.completed ? 'line-through text-gray-500' : 'text-blue-800'
                  }`}
              >
                {task.text}
              </p>

              {(task.date || task.time) && (
                <p className="text-sm text-blue-600 italic">
                  üìÖ {task.date || 'Ch∆∞a ch·ªçn ng√†y'} ‚è∞ {task.time || 'Ch∆∞a ch·ªçn gi·ªù'}
                </p>
              )}
            </div>
            <div className="flex items-center space-x-3">
              <input
                type="checkbox"
                checked={task.completed}
                onChange={() => onToggle(index)}
                className="w-5 h-5 accent-green-500"
                title="ƒê√°nh d·∫•u ho√†n th√†nh"
              />
              <button
                className="text-yellow-500 hover:text-yellow-600 text-xl"
                onClick={() => onEdit(index)}
              >
                ‚úèÔ∏è
              </button>
              <button
                className="text-red-500 hover:text-red-600 text-xl"
                onClick={() => onDelete(index)}
              >
                üóëÔ∏è
              </button>
            </div>
          </li>
        ))
      )}
    </ul>
  );
});

function App() {
  const [tasks, setTasks] = useState([]);// danh s√°ch c√¥ng vi·ªác, tasks l√† bi·∫øn ch·ª©a danh s√°ch c√°c task d∆∞·ªõi d·∫°ng m·∫£ng, setTask l√† h√†m ƒë·ªÉ c·∫≠p nh·∫≠t tasks m·ªói khi c√≥ thay ƒë·ªïi
  const [newTask, setNewTask] = useState('');// n·ªôi dung c√¥ng vi·ªác
  const [date, setDate] = useState('');// ng√†y th·ª±c hi·ªán
  const [time, setTime] = useState('');// gi·ªù th·ª±c hi·ªán 
  const [editIndex, setEditIndex] = useState(null);// kh√°c null th√¨ ƒëang ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a 

  useEffect(() => {
    const saved = localStorage.getItem('tasks');// L·∫•y d·ªØ li·ªáu t·ª´ localStorage
    if (saved) setTasks(JSON.parse(saved));// N·∫øu c√≥, th√¨ parse ra v√† g√°n v√†o state
  }, []);//[] ch·ªâ ch·∫°y m·ªôt l·∫ßn duy nh·∫•t khi component ƒë∆∞·ª£c render l·∫ßn ƒë·∫ßu ti√™n

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);// c·∫≠p nh·∫≠t l·∫°i localstorage khi task thay ƒë·ªïi

  const handleAddTask = () => {
    const trimmedTask = newTask.trim();//l·∫•y gi√° tr·ªã ban ƒë·∫ßu ƒë√£ nh·∫≠p ·ªü √¥ input v√† x√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu cu·ªëi
    if (!trimmedTask) return;// n·∫øu ng∆∞·ªùi d√πng nh·∫≠p kho·∫£ng tr·∫Øng th√¥i th√¨ kh√¥ng l√†m g√¨ h·∫øt.

    const taskData = { text: trimmedTask, date, time, completed: false };// t·∫°o ra m·ªôt obj ƒë·∫°i di·ªán cho 1 task

    if (editIndex !== null) {// ki·∫øm tra c√≥ ƒëang ch·ªânh s·ª≠a task n√†o kh√¥ng
      const updatedTasks = [...tasks];
      updatedTasks[editIndex] = { ...updatedTasks[editIndex], ...taskData };// t√¨m task trong m·∫£ng v√† ch·ªânh s·ª≠a (gi·ªØ l·∫°i th√¥ng tin c≈© n·∫øu n√≥ kh√¥ng c√≥ thay ƒë·ªïi)
      setTasks(updatedTasks);//c·∫≠p nh·∫≠t l·∫°i task v·ªõi b·∫£n ƒë√£ ch·ªânh s·ª≠a
      setEditIndex(null);//c·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i tho√°t kh·ªèi ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
    } else {
      setTasks([...tasks, taskData]);// n·∫øu kh√¥ng ph·∫£i ch·ªânh s·ª≠a th√¨ th√™m task m·ªõi v√¥
    }
    // reset l·∫°i c√°c √¥ nh·∫≠p li·ªáu.
    setNewTask('');
    setDate('');
    setTime('');
  };



  const handleEditTask = useCallback((index) => {// x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ·∫•n n√∫t s·ª≠a tr√™n 1 task
    const task = tasks[index];//l·∫•y task t·∫°i v·ªã tr√≠ index
    setNewTask(task.text);//√¥ nh·∫≠p n·ªôi dung
    setDate(task.date);//√¥ nh·∫≠p ng√†y
    setTime(task.time);//√¥ nh·∫≠p gi·ªù 
    setEditIndex(index);//l∆∞u l·∫°i v·ªã tr√≠ c·ªßa task ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a
  }, [tasks]);//[] ch·ªâ t·∫°o l·∫°i h√†m kho gi√° tr·ªã c·ªßa tasks thay ƒë·ªïi, n·∫øu kh√¥ng ƒë·ªïi th√¨ v·∫´n s·ª≠ d·ª•ng b·∫£n c≈©, react d√πng l·∫°i b·∫£n c≈© ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t

  const handleDeleteTask = useCallback((index) => {// x√≥a task t·∫°i v·ªã tr√≠ index, c√≥ s·ª≠ d·ª•ng useCallback ƒë·ªÉ t√¥i ∆∞u h√≥a
    // setTasks(tasks.filter((_, i) => i !== index));
    const updatedTasks = tasks.filter((task, taskIndex) => taskIndex !== index);// s·ª≠ d·ª•ng filter ƒë·ªÉ duy·ªát t·ª´ng task trong tasks, gi·ªØ l·∫°i nh·ªØng task kh√¥ng tr√πng v·ªõi index c·∫ßn x√≥a
    setTasks(updatedTasks);// c·∫≠p nh·∫≠t state
  }, [tasks]);

  // const toggleCompleteTask = useCallback((index) => {
  //   const updatedTasks = [...tasks];
  //   updatedTasks[index].completed = !updatedTasks[index].completed;
  //   setTasks(updatedTasks);
  // }, [tasks]);

  const toggleCompleteTask = useCallback((index) => {// khi t√≠ch v√†o checkbox, h√†m n√†y s·∫Ω  thay ƒë·ªïi trang th√°i completed
    const updatedTasks = tasks.map((task, i) => {
      if (i === index) {
        return { ...task, completed: !task.completed };// n·∫øu ƒëang false th√¨ chuy·ªÉn th√†nh true( ho√†n th√†nh v) v√† ng∆∞·ª£c l·∫°i
      }
      return task;
    });
    setTasks(updatedTasks); // c·∫≠p nh·∫≠t l·∫°i task ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a
  }, [tasks]);

  //  l·ªçc v√† ƒë·∫øm s·ªë l∆∞·ª£ng c√¥ng vi·ªác ƒë√£ ho√†n th√†nh, tong ƒë√≥ c√≥ s·ª≠ d·ª•ng useMemo ƒë·∫ª  tr√°nh t√≠nh to√°n l·∫°i m·ªói l·∫ßn render component
  const completedCount = useMemo(() => tasks.filter(task => task.completed).length, [tasks]);

  return (
    <div className="min-h-screen bg-blue-100 flex flex-col items-center justify-center p-6">
      <h1 className="text-4xl font-bold text-blue-700 mb-2">üìù Danh s√°ch c√¥ng vi·ªác</h1>
      <p className="text-blue-600 mb-6">ƒê√£ ho√†n th√†nh: {completedCount} / {tasks.length}</p>

      <div className="w-full max-w-2xl bg-white p-10 rounded-2xl shadow-2xl">
        <div className="flex flex-col gap-4 mb-6">
          <input
            type="text"
            placeholder="Nh·∫≠p c√¥ng vi·ªác..."
            className="p-4 border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
            value={newTask}
            onChange={(e) => setNewTask(e.target.value)}
          />
          <div className="flex gap-4">
            <input
              type="date"
              className="flex-1 p-4 border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
              value={date}
              onChange={(e) => setDate(e.target.value)}
            />
            <input
              type="time"
              className="flex-1 p-4 border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
              value={time}
              onChange={(e) => setTime(e.target.value)}
            />
          </div>
          <button
            className="bg-blue-500 text-white py-3 rounded-lg hover:bg-blue-600 text-lg font-medium"
            onClick={handleAddTask}
          >
            {editIndex !== null ? 'C·∫≠p nh·∫≠t' : 'Th√™m'}
          </button>
        </div>
        {/* hi·ªÉn th·ªã danh s√°ch c√¥ng vi·ªác v·ªõi tasklist */}
        <TaskList
          tasks={tasks}
          onEdit={handleEditTask}
          onDelete={handleDeleteTask}
          onToggle={toggleCompleteTask}
        />
      </div>
    </div>
  );
}

export default App;